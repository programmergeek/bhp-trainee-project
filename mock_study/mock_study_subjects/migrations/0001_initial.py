# Generated by Django 2.2.1 on 2025-03-17 06:01

import _socket
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
from django.utils.timezone import utc
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_revision.revision_field
import edc_base.model_fields.date_estimated
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.sites.managers
import edc_base.utils
import edc_consent.validators
import edc_protocol.validators
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdverseEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_identifier', models.CharField(max_length=10)),
                ('site', models.CharField(choices=[('gaborone_private_hospital', 'Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], max_length=50)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe')], max_length=20)),
                ('onset_date', models.DateField(default=datetime.datetime(2025, 3, 17, 6, 1, 21, 163854, tzinfo=utc))),
                ('resolution_date', models.DateField()),
                ('action_taken', models.TextField()),
                ('outcome', models.TextField()),
                ('investigator_review', models.TextField()),
                ('investigator_comment', models.TextField()),
                ('investigator_identifier', models.CharField(max_length=20)),
                ('study_intervention_relationship', models.CharField(max_length=50, verbose_name='How related was the clinical study to the adverse event?')),
            ],
            options={
                'verbose_name': 'Adverse Event',
                'verbose_name_plural': 'Adverse Events',
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_identifier', models.CharField(max_length=20)),
                ('datetime', models.DateTimeField()),
                ('site', models.CharField(choices=[('gaborone_private_hospital', 'Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], max_length=30)),
            ],
            options={
                'verbose_name': 'Appointment',
                'verbose_name_plural': 'Appointments',
            },
        ),
        migrations.CreateModel(
            name='CBCBloodTestResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_identifier', models.CharField(max_length=20)),
                ('sample_id', models.CharField(max_length=10)),
                ('red_blood_cell_count', models.FloatField()),
                ('hemoglobin', models.FloatField()),
                ('hematocrit', models.FloatField()),
                ('white_blood_cell_count', models.FloatField()),
                ('platelet_count', models.FloatField()),
                ('date_tested', models.DateField(default=datetime.datetime(2025, 3, 17, 6, 1, 21, 162734, tzinfo=utc))),
                ('test_site', models.CharField(choices=[('optimum_health_medical_laboratory', 'Optimum Health Mediacal Laboratory'), ('diagnofirm_medical_laboratories', 'Diagnofirm Medical Laboratories'), ('mmoloki_medical_laboratories', 'Mmoloki Medical Laboratories')], max_length=50)),
                ('testing_status', models.CharField(choices=[('pending', 'Pending'), ('complete', 'Complete')], max_length=10)),
            ],
            options={
                'verbose_name': 'CBC Blood Test Result',
                'verbose_name_plural': 'CBC Blood Test Results',
            },
        ),
        migrations.CreateModel(
            name='Compliance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doses_taken', models.IntegerField()),
                ('prescribed_dosage', models.IntegerField()),
                ('subject_identifier', models.CharField(max_length=20)),
                ('subject_feedback', models.TextField()),
                ('investigator_comments', models.TextField()),
            ],
            options={
                'verbose_name': 'Compliance Form',
                'verbose_name_plural': 'Compliance Forms',
            },
        ),
        migrations.CreateModel(
            name='ExitInterview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_identifier', models.CharField(max_length=20)),
                ('summary', models.TextField()),
                ('investigator_observation', models.TextField()),
                ('final_comments', models.TextField()),
                ('final_recommendation', models.TextField()),
            ],
            options={
                'verbose_name': 'Exit Interview',
                'verbose_name_plural': 'Exit Interviews',
            },
        ),
        migrations.CreateModel(
            name='FinalQuestionnaire',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_identifier', models.CharField(max_length=20)),
                ('participant_experience_with_the_study', models.TextField()),
                ('percieved_benefits', models.TextField()),
                ('percieved_challenges', models.TextField()),
                ('willingness_to_participate_in_future_studies', models.CharField(max_length=20)),
            ],
            options={
                'verbose_name': 'Final Questionnaire',
                'verbose_name_plural': 'Final Questionnaire',
            },
        ),
        migrations.CreateModel(
            name='LiverPanelBloodTestResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sample_identifier', models.CharField(max_length=20)),
                ('test_date', models.CharField(max_length=20)),
                ('status', models.CharField(max_length=10)),
                ('alt', models.FloatField(verbose_name='Alanine Aminotransferase (ALT)')),
                ('ast', models.FloatField(verbose_name='Aspartate Aminotransferase (AST)')),
                ('alp', models.FloatField(verbose_name='Alkaline Phosphatase (ALP)')),
                ('bilirubin_total', models.FloatField()),
                ('bilirubin_direct', models.FloatField()),
                ('bilirubin_indirect', models.FloatField()),
                ('albumin', models.FloatField()),
                ('total_protien', models.FloatField()),
            ],
            options={
                'verbose_name': 'Liver Pannel Blood Test Result',
                'verbose_name_plural': 'Liver Pannel Blood Test Result',
            },
        ),
        migrations.CreateModel(
            name='SubjectBloodSample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_identifier', models.CharField(max_length=20)),
                ('sample_identifier', models.CharField(max_length=20)),
                ('sample_type', models.CharField(max_length=10)),
                ('collection_date', models.DateField(default=datetime.datetime(2025, 3, 17, 6, 1, 21, 160642, tzinfo=utc))),
                ('collected_by', models.CharField(max_length=20)),
                ('collection_site', models.CharField(choices=[('gaborone_private_hospital', 'Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], max_length=50)),
                ('volume', models.FloatField()),
                ('anticoagulant', models.CharField(choices=[('heparin', 'Heparin'), ('citrate', 'Citrate')], max_length=50)),
                ('tube_type', models.CharField(max_length=50)),
                ('storage_location', models.CharField(choices=[('optimum_health_medical_laboratory', 'Optimum Health Mediacal Laboratory'), ('diagnofirm_medical_laboratories', 'Diagnofirm Medical Laboratories'), ('mmoloki_medical_laboratories', 'Mmoloki Medical Laboratories')], max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('complete', 'Complete')], max_length=20)),
            ],
            options={
                'verbose_name': 'Subject Blood Sample',
                'verbose_name_plural': 'Subject Blood Samples',
            },
        ),
        migrations.CreateModel(
            name='SubjectScreening',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('screening_identifier', models.CharField(editable=False, max_length=36, unique=True, verbose_name='Eligibility Identifier')),
                ('report_datetime', models.DateTimeField(default=datetime.datetime(2025, 3, 17, 6, 1, 20, 765289, tzinfo=utc), verbose_name='Report date and time.')),
                ('has_hypertension', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text="If 'No', then stop. Patient cannot be part of the study.", max_length=3, verbose_name='Have they been diagnosed with hypertension?')),
                ('eligible', models.BooleanField(default=False, editable=False)),
                ('age', models.IntegerField(help_text='If the patient is not between the ages of 30 and 65, then stop, they cannot be part of the study.')),
                ('is_pregnant', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text="If 'Yes', then stop. The patient cannot be part of this study. ", max_length=3, verbose_name='Are they currently pregnant?')),
                ('is_breastfeeding', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text="If 'Yes', then stop. The patient cannot be part of this study.", max_length=3, verbose_name='Is the patient currently breastfeeding?')),
                ('has_allergies_to_drug', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text="If 'Yes', then stop. The patient cannot be part of this study.", max_length=3, verbose_name='Does the patient have any known allergies to XYZ Drug?')),
                ('has_history_of_severe_cardiovascular_events', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text="If 'Yes', then stop. The patient cannot be part of this study.", max_length=3, verbose_name='Does the patient have a history of sever cardiovascular events within the last 6 (six) months?')),
                ('enrollment_site', models.CharField(choices=[('gaborone_private_hospital', 'Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], help_text='Hospitals where subject is recruited.', max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Mock Study Screening',
                'verbose_name_plural': 'Mock Study Screening',
            },
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment', models.CharField(max_length=10)),
                ('reason', models.CharField(choices=[('Quarterly visit/contact', 'Quarterly visit/contact'), ('Unscheduled visit/contact', 'Unscheduled visit/contact'), ('Missed quarterly visit', 'Missed quarterly visit'), ('Lost to follow-up', 'Lost to follow-up (use only when taking subject off study)'), ('Death', 'Death'), ('off study', 'Off study'), ('deferred', 'Deferred')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_unscheduled', models.CharField(choices=[('Routine oncology', 'Routine oncology clinic visit (i.e. planned chemo, follow-up)'), ('Ill oncology', 'Ill oncology clinic visit'), ('Patient called', 'Patient called to come for visit'), ('N/A', 'Not Applicable'), ('OTHER', 'Other, specify:')], default='N/A', max_length=50, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('info_source', models.CharField(choices=[('Clinic visit w/ subject', 'Clinic visit with participant'), ('Other contact w/ subject', 'Other contact with participant (i.e telephone call)'), ('Contact w/ health worker', 'Contact with health care worker'), ('Contact w/ family/design', 'Contact with family or designated person who can provide information'), ('OTHER', 'Other,specify')], max_length=40, verbose_name='What is the main source of this information?')),
            ],
            options={
                'verbose_name': 'Mock Study Subject Visit',
                'verbose_name_plural': 'Mock Study Subject Visit',
            },
        ),
        migrations.CreateModel(
            name='SubjectVitals',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject_identifier', models.CharField(max_length=10)),
                ('collection_site', models.CharField(choices=[('gaborone_private_hospital', 'Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], max_length=50)),
                ('were_vitals_collected', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=3)),
                ('measurement_date', models.DateField()),
                ('systolic_blood_pressure', models.IntegerField()),
                ('diastolic_blood_pressure', models.IntegerField()),
                ('anatomical_location_of_measurement', models.CharField(max_length=50)),
                ('height', models.FloatField()),
                ('weight', models.FloatField()),
                ('is_baseline', models.BooleanField(verbose_name="Is this the participant's baseline vitals measurement?")),
            ],
            options={
                'verbose_name': 'Subject Vitals',
                'verbose_name_plural': 'Subject Vitals',
            },
        ),
        migrations.CreateModel(
            name='SubjectLocator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_signed', models.DateField(default=django.utils.timezone.now, verbose_name='Date Locator Form signed ')),
                ('local_clinic', models.CharField(help_text='Please give clinic code.', max_length=75, verbose_name='When you stay in the village, what clinic/health post do you normally go to?')),
                ('home_village', models.CharField(max_length=75, verbose_name='Where is your home village?')),
                ('has_alt_contact', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', models.CharField(blank=True, help_text='include firstname and surname', max_length=35, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', models.CharField(blank=True, max_length=35, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', models.CharField(blank=True, max_length=8, null=True, verbose_name='Cell number')),
                ('other_alt_contact_cell', models.CharField(blank=True, max_length=8, null=True, verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', models.CharField(blank=True, max_length=8, null=True, verbose_name='Telephone number')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='subject_locator_site', to='sites.Site')),
            ],
            options={
                'verbose_name': 'Subject Locator',
                'verbose_name_plural': 'Subject Locator',
            },
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='If not a citizen, is the participant legally married to a Botswana citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('identity_type', models.CharField(max_length=25, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the participant')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the participant had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the participant questions about this study and the participant has demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have verified that the participant has signed the consent form')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the participant with a copy of their signed informed consent')),
                ('may_store_genetic_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the participant agree that a portion of the blood sample that is taken be stored for genetic analysis?')),
                ('may_store_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the participant agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'Yes' STOP participant cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant literate?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name")),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], help_text='The language used for the consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('report_datetime', models.DateTimeField(editable=False, null=True)),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('screening_identifier', models.CharField(blank=True, max_length=50, null=True, verbose_name='Screening identifier')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True, verbose_name='Gender')),
                ('is_signed', models.BooleanField(default=False, editable=False)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.Site')),
            ],
            options={
                'verbose_name': 'Mock Study Consent',
                'verbose_name_plural': 'Mock Study Consent',
                'get_latest_by': 'consent_datetime',
            },
            managers=[
                ('consent', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalSubjectScreening',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('screening_identifier', models.CharField(db_index=True, editable=False, max_length=36, verbose_name='Eligibility Identifier')),
                ('report_datetime', models.DateTimeField(default=datetime.datetime(2025, 3, 17, 6, 1, 20, 765289, tzinfo=utc), verbose_name='Report date and time.')),
                ('has_hypertension', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text="If 'No', then stop. Patient cannot be part of the study.", max_length=3, verbose_name='Have they been diagnosed with hypertension?')),
                ('eligible', models.BooleanField(default=False, editable=False)),
                ('age', models.IntegerField(help_text='If the patient is not between the ages of 30 and 65, then stop, they cannot be part of the study.')),
                ('is_pregnant', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text="If 'Yes', then stop. The patient cannot be part of this study. ", max_length=3, verbose_name='Are they currently pregnant?')),
                ('is_breastfeeding', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text="If 'Yes', then stop. The patient cannot be part of this study.", max_length=3, verbose_name='Is the patient currently breastfeeding?')),
                ('has_allergies_to_drug', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text="If 'Yes', then stop. The patient cannot be part of this study.", max_length=3, verbose_name='Does the patient have any known allergies to XYZ Drug?')),
                ('has_history_of_severe_cardiovascular_events', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], help_text="If 'Yes', then stop. The patient cannot be part of this study.", max_length=3, verbose_name='Does the patient have a history of sever cardiovascular events within the last 6 (six) months?')),
                ('enrollment_site', models.CharField(choices=[('gaborone_private_hospital', 'Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], help_text='Hospitals where subject is recruited.', max_length=100, null=True)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Mock Study Screening',
                'verbose_name_plural': 'historical Mock Study Screening',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='If not a citizen, is the participant legally married to a Botswana citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('identity_type', models.CharField(max_length=25, verbose_name='What type of identity number is this?')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the participant')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the participant had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the participant questions about this study and the participant has demonstrated understanding')),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have verified that the participant has signed the consent form')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the participant with a copy of their signed informed consent')),
                ('may_store_genetic_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Does the participant agree that a portion of the blood sample that is taken be stored for genetic analysis?')),
                ('may_store_samples', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the participant agree to have samples stored after the study has ended')),
                ('is_incarcerated', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="( if 'Yes' STOP participant cannot be consented )", max_length=3, null=True, validators=[edc_consent.validators.eligible_if_no], verbose_name='Is the participant under involuntary incarceration?')),
                ('is_literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' provide witness's name on this form and signature on the paper document.", max_length=3, verbose_name='Is the participant literate?')),
                ('witness_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is illiterate.<br>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Witness's last and first name")),
                ('language', models.CharField(choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('th', 'Thai'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], help_text='The language used for the consent process will also be used during data collection.', max_length=25, verbose_name='Language of consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('report_datetime', models.DateTimeField(editable=False, null=True)),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('screening_identifier', models.CharField(blank=True, max_length=50, null=True, verbose_name='Screening identifier')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True, verbose_name='Gender')),
                ('is_signed', models.BooleanField(default=False, editable=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.Site')),
            ],
            options={
                'verbose_name': 'historical Mock Study Consent',
                'verbose_name_plural': 'historical Mock Study Consent',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
