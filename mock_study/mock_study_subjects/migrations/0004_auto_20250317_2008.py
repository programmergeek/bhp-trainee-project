# Generated by Django 2.2.1 on 2025-03-17 20:08

import _socket
import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from django.utils.timezone import utc
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_revision.revision_field
import edc_base.model_fields.custom_fields
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.model_validators.phone
import edc_base.sites.managers
import edc_base.utils
import edc_protocol.validators
import mock_study_subjects.models.subject_visit
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('mock_study_subjects', '0003_auto_20250317_0647'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='appointment',
            options={'ordering': ('timepoint', 'visit_code_sequence'), 'verbose_name': 'Appointment', 'verbose_name_plural': 'Appointments'},
        ),
        migrations.AlterModelManagers(
            name='subjectlocator',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.AlterModelManagers(
            name='subjectvisit',
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('on_site', mock_study_subjects.models.subject_visit.CurrentSiteManager()),
            ],
        ),
        migrations.AddField(
            model_name='appointment',
            name='appt_close_datetime',
            field=models.DateTimeField(help_text='timepoint_datetime adjusted according to the nearest available datetime for this facility', null=True),
        ),
        migrations.AddField(
            model_name='appointment',
            name='appt_datetime',
            field=models.DateTimeField(db_index=True, default=datetime.datetime(2025, 3, 17, 20, 7, 37, 952372, tzinfo=utc), verbose_name='Appointment date and time'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='appointment',
            name='appt_reason',
            field=models.CharField(choices=[('scheduled', 'Routine / Scheduled'), ('unscheduled', 'Unscheduled')], default='', max_length=25, verbose_name='Reason for appointment'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='appointment',
            name='appt_status',
            field=models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', help_text="If the visit has already begun, only 'in progress' or 'incomplete' are valid options", max_length=25, verbose_name='Status'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='appt_type',
            field=models.CharField(choices=[('clinic', 'In clinic'), ('home', 'At home'), ('hospital', 'In hospital'), ('telephone', 'By telephone')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='comment',
            field=models.CharField(blank=True, max_length=250, verbose_name='Comment'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='created',
            field=models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow),
        ),
        migrations.AddField(
            model_name='appointment',
            name='device_created',
            field=models.CharField(blank=True, max_length=10),
        ),
        migrations.AddField(
            model_name='appointment',
            name='device_modified',
            field=models.CharField(blank=True, max_length=10),
        ),
        migrations.AddField(
            model_name='appointment',
            name='facility_name',
            field=models.CharField(default='', help_text='set by model that creates appointments, e.g. Enrollment', max_length=25),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='appointment',
            name='hostname_created',
            field=models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60),
        ),
        migrations.AddField(
            model_name='appointment',
            name='hostname_modified',
            field=edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50),
        ),
        migrations.AddField(
            model_name='appointment',
            name='is_confirmed',
            field=models.BooleanField(default=False, editable=False),
        ),
        migrations.AddField(
            model_name='appointment',
            name='modified',
            field=models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow),
        ),
        migrations.AddField(
            model_name='appointment',
            name='revision',
            field=django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='schedule_name',
            field=models.CharField(default='', editable=False, max_length=25),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='appointment',
            name='timepoint',
            field=models.DecimalField(decimal_places=1, help_text='timepoint from schedule', max_digits=6, null=True),
        ),
        migrations.AddField(
            model_name='appointment',
            name='timepoint_closed_datetime',
            field=models.DateTimeField(editable=False, null=True),
        ),
        migrations.AddField(
            model_name='appointment',
            name='timepoint_datetime',
            field=models.DateTimeField(help_text='Unadjusted datetime calculated from visit schedule', null=True),
        ),
        migrations.AddField(
            model_name='appointment',
            name='timepoint_opened_datetime',
            field=models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True),
        ),
        migrations.AddField(
            model_name='appointment',
            name='timepoint_status',
            field=models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15),
        ),
        migrations.AddField(
            model_name='appointment',
            name='user_created',
            field=edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='user_modified',
            field=edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='visit_code',
            field=models.CharField(editable=False, max_length=25, null=True),
        ),
        migrations.AddField(
            model_name='appointment',
            name='visit_code_sequence',
            field=models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='visit_schedule_name',
            field=models.CharField(default='', editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='consent_model',
            field=models.CharField(editable=False, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='consent_version',
            field=models.CharField(editable=False, max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='created',
            field=models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='device_created',
            field=models.CharField(blank=True, max_length=10),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='device_modified',
            field=models.CharField(blank=True, max_length=10),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='hostname_created',
            field=models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='hostname_modified',
            field=edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='indirect_contact_cell',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='indirect_contact_cell_alt',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternative)'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='indirect_contact_name',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='indirect_contact_phone',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='indirect_contact_physical_address',
            field=django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Full physical address '),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='indirect_contact_relation',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='mail_address',
            field=django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Mailing address '),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='may_call',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=25, verbose_name='Has the participant given permission <b>to contacted by telephone or cell</b> by study staff for follow-up purposes during the study?'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='may_call_work',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=25, verbose_name='Has the participant given permission to contacted <b>at work</b> by telephone or cell by study staff for follow-up purposes during the study?'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='may_contact_indirectly',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given permission for study staff <b>to contact anyone else</b> for follow-up purposes during the study?'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='may_sms',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given permission <b>to be contacted by SMS</b> by study staff for follow-up purposes during the study?'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='may_visit_home',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=25, verbose_name='Has the participant given permission for study staff <b>to make home visits</b> for follow-up purposes?'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='modified',
            field=models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='physical_address',
            field=django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Physical address with detailed description'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='report_datetime',
            field=models.DateTimeField(default=edc_base.utils.get_utcnow),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='revision',
            field=django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='subject_cell',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='subject_cell_alt',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='subject_identifier',
            field=models.CharField(default='', max_length=50, unique=True, verbose_name='Subject Identifier'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='subject_phone',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='subject_phone_alt',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='subject_work_cell',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Work contact cell number'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='subject_work_phone',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Work contact telephone'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='subject_work_place',
            field=django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Name and location of work place'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='user_created',
            field=edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created'),
        ),
        migrations.AddField(
            model_name='subjectlocator',
            name='user_modified',
            field=edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='comments',
            field=models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='consent_model',
            field=models.CharField(editable=False, max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='consent_version',
            field=models.CharField(editable=False, max_length=10, null=True),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='created',
            field=models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='device_created',
            field=models.CharField(blank=True, max_length=10),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='device_modified',
            field=models.CharField(blank=True, max_length=10),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='hostname_created',
            field=models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='hostname_modified',
            field=edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='info_source_other',
            field=edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='last_alive_date',
            field=models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='modified',
            field=models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='reason_missed',
            field=models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'Missed' above, provide the reason the scheduled visit was missed"),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='reason_missed_other',
            field=edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='reason_unscheduled_other',
            field=edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='report_datetime',
            field=models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='require_crfs',
            field=models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='revision',
            field=django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='schedule_name',
            field=models.CharField(default='', editable=False, max_length=25),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='site',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.Site'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='study_status',
            field=models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status"),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='subject_identifier',
            field=models.CharField(default='', max_length=50, verbose_name='Subject Identifier'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='survival_status',
            field=models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status"),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='user_created',
            field=edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='user_modified',
            field=edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='visit_code',
            field=models.CharField(editable=False, max_length=25, null=True),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='visit_code_sequence',
            field=models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence'),
        ),
        migrations.AddField(
            model_name='subjectvisit',
            name='visit_schedule_name',
            field=models.CharField(default='', editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='adverseevent',
            name='onset_date',
            field=models.DateField(default=datetime.datetime(2025, 3, 17, 20, 7, 12, 964685, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='appointment',
            name='id',
            field=edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='cbcbloodtestresult',
            name='date_tested',
            field=models.DateField(default=datetime.datetime(2025, 3, 17, 20, 7, 12, 963582, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='historicalsubjectconsent',
            name='subject_identifier',
            field=models.CharField(max_length=50, verbose_name='Subject Identifier'),
        ),
        migrations.AlterField(
            model_name='historicalsubjectscreening',
            name='report_datetime',
            field=models.DateTimeField(default=datetime.datetime(2025, 3, 17, 20, 7, 12, 429, tzinfo=utc), verbose_name='Report date and time.'),
        ),
        migrations.AlterField(
            model_name='subjectbloodsample',
            name='collection_date',
            field=models.DateField(default=datetime.datetime(2025, 3, 17, 20, 7, 12, 961415, tzinfo=utc)),
        ),
        migrations.AlterField(
            model_name='subjectconsent',
            name='subject_identifier',
            field=models.CharField(max_length=50, verbose_name='Subject Identifier'),
        ),
        migrations.AlterField(
            model_name='subjectlocator',
            name='alt_contact_cell',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Cell number'),
        ),
        migrations.AlterField(
            model_name='subjectlocator',
            name='alt_contact_name',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include firstname and surname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person'),
        ),
        migrations.AlterField(
            model_name='subjectlocator',
            name='alt_contact_rel',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant'),
        ),
        migrations.AlterField(
            model_name='subjectlocator',
            name='alt_contact_tel',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Telephone number'),
        ),
        migrations.AlterField(
            model_name='subjectlocator',
            name='id',
            field=edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='subjectlocator',
            name='other_alt_contact_cell',
            field=django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Cell number (alternate)'),
        ),
        migrations.AlterField(
            model_name='subjectscreening',
            name='report_datetime',
            field=models.DateTimeField(default=datetime.datetime(2025, 3, 17, 20, 7, 12, 429, tzinfo=utc), verbose_name='Report date and time.'),
        ),
        migrations.AlterField(
            model_name='subjectvisit',
            name='id',
            field=edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='subjectvisit',
            name='info_source',
            field=models.CharField(choices=[('', '')], max_length=40, verbose_name='What is the main source of this information?'),
        ),
        migrations.AlterField(
            model_name='subjectvisit',
            name='reason',
            field=models.CharField(choices=[('', '')], max_length=25, verbose_name='What is the reason for this visit report?'),
        ),
        migrations.AlterField(
            model_name='subjectvisit',
            name='reason_unscheduled',
            field=models.CharField(choices=[('', '')], default='N/A', max_length=50, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit"),
        ),
        migrations.AlterUniqueTogether(
            name='appointment',
            unique_together={('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'timepoint', 'visit_code_sequence')},
        ),
        migrations.CreateModel(
            name='HistoricalSubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason_unscheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'Missed' above, provide the reason the scheduled visit was missed")),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('appointment', models.CharField(max_length=10)),
                ('reason', models.CharField(choices=[('', '')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_unscheduled', models.CharField(choices=[('', '')], default='N/A', max_length=50, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('info_source', models.CharField(choices=[('', '')], max_length=40, verbose_name='What is the main source of this information?')),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.Site')),
            ],
            options={
                'verbose_name': 'historical Mock Study Subject Visit',
                'verbose_name_plural': 'historical Mock Study Subject Visit',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectLocator',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('may_call', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission <b>to contacted by telephone or cell</b> by study staff for follow-up purposes during the study?')),
                ('may_visit_home', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission for study staff <b>to make home visits</b> for follow-up purposes?')),
                ('may_sms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given permission <b>to be contacted by SMS</b> by study staff for follow-up purposes during the study?')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Mailing address ')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Physical address with detailed description')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_contact_indirectly', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given permission for study staff <b>to contact anyone else</b> for follow-up purposes during the study?')),
                ('indirect_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('indirect_contact_relation', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('indirect_contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Full physical address ')),
                ('indirect_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('indirect_contact_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternative)')),
                ('indirect_contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission to contacted <b>at work</b> by telephone or cell by study staff for follow-up purposes during the study?')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Work contact telephone')),
                ('subject_work_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Work contact cell number')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow)),
                ('date_signed', models.DateField(default=django.utils.timezone.now, verbose_name='Date Locator Form signed ')),
                ('local_clinic', models.CharField(help_text='Please give clinic code.', max_length=75, verbose_name='When you stay in the village, what clinic/health post do you normally go to?')),
                ('home_village', models.CharField(max_length=75, verbose_name='Where is your home village?')),
                ('has_alt_contact', models.CharField(choices=[('yes', 'Yes'), ('no', 'No')], max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include firstname and surname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Telephone number')),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.Site')),
            ],
            options={
                'verbose_name': 'historical Subject Locator',
                'verbose_name_plural': 'historical Subject Locator',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAppointment',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('timepoint_status', models.CharField(choices=[('open', 'Open'), ('feedback', 'Feedback'), ('closed', 'Closed')], default='open', max_length=15)),
                ('timepoint_opened_datetime', models.DateTimeField(editable=False, help_text="the original calculated model's datetime, updated in the signal", null=True)),
                ('timepoint_closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('timepoint', models.DecimalField(decimal_places=1, help_text='timepoint from schedule', max_digits=6, null=True)),
                ('timepoint_datetime', models.DateTimeField(help_text='Unadjusted datetime calculated from visit schedule', null=True)),
                ('appt_close_datetime', models.DateTimeField(help_text='timepoint_datetime adjusted according to the nearest available datetime for this facility', null=True)),
                ('facility_name', models.CharField(help_text='set by model that creates appointments, e.g. Enrollment', max_length=25)),
                ('appt_datetime', models.DateTimeField(db_index=True, verbose_name='Appointment date and time')),
                ('appt_type', models.CharField(choices=[('clinic', 'In clinic'), ('home', 'At home'), ('hospital', 'In hospital'), ('telephone', 'By telephone')], default='clinic', help_text='Default for subject may be edited Subject Configuration.', max_length=20, verbose_name='Appointment type')),
                ('appt_status', models.CharField(choices=[('new', 'New'), ('in_progress', 'In Progress'), ('incomplete', 'Incomplete'), ('done', 'Done'), ('cancelled', 'Cancelled')], db_index=True, default='new', help_text="If the visit has already begun, only 'in progress' or 'incomplete' are valid options", max_length=25, verbose_name='Status')),
                ('appt_reason', models.CharField(choices=[('scheduled', 'Routine / Scheduled'), ('unscheduled', 'Unscheduled')], max_length=25, verbose_name='Reason for appointment')),
                ('comment', models.CharField(blank=True, max_length=250, verbose_name='Comment')),
                ('is_confirmed', models.BooleanField(default=False, editable=False)),
                ('subject_identifier', models.CharField(max_length=20)),
                ('datetime', models.DateTimeField()),
                ('site', models.CharField(choices=[('gaborone_private_hospital', 'Gaborone Private Hospital (GPH)'), ('nyangabgwe_referral_hospital', 'Nyangabgwe Referral Hospital (NRH)'), ('princess_marina_hospital', 'Princess Marina Hospital (PMH)'), ('bokamoso_private_hospital', 'Bokamoso Private Hospital (BPH)')], max_length=30)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Appointment',
                'verbose_name_plural': 'historical Appointments',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
